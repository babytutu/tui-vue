/**
 * 生成组件入口文件
 */
// 导入第三方或系统包
const fs = require('fs')
const glob = require('glob')
const path = require('path')

const template = require('./utils').template
const camelCase = require('./utils').camelCase
const upcase = require('./utils').upcase

// 此为输入路径
const INPUT_PATH = path.join(__dirname, '../lib/components')
// 此为输出路径
const OUTPUT_PATH = path.join(__dirname, '../lib/')

const OUTPUT_FILE = `${OUTPUT_PATH}index.js`

const GENERATE_PATH = `./${path.relative(OUTPUT_PATH, INPUT_PATH)}`

// 生成导入模板
const generateExports = template `
/* Automatic generated by './build/build-components.js' */
${'modulesImport'}

const components = [
  ${'modulesName'}
]

// JS组件
const jsComponents = {
  ${'jsComponents'},
}

const install = function (Vue) {
  // 全局注册普通组件
  Object.keys(components).map(key => Vue.component(components[key].name, components[key]))
  // 全局注册JS组件
  Object.assign(Vue.prototype, jsComponents)
}

export default {
  install
}
`
// 读取组件模块
const componentsFiles = glob.sync('*', {
  cwd: INPUT_PATH
})

// 生成所需的导入路径文本
const modulesImport = []
const modulesName = []
const jsComponents = []
componentsFiles.map(file => {
  const dirname = file.replace(/\//g, '')
  const moduleName = camelCase(dirname)
  const isJsComponents = /toast|message|popup|loading/
  if (!isJsComponents.test(moduleName)) {
    const name = upcase(moduleName)
    modulesImport.push(`import ${name} from '${GENERATE_PATH}/${file}/${dirname}.vue'`)
    modulesName.push(name)
  } else {
    modulesImport.push(`import $${moduleName} from '${GENERATE_PATH}/${file}'`)
    jsComponents.push(`$${moduleName}`)
  }
})

fs.writeFileSync(OUTPUT_FILE, generateExports({
  modulesImport: modulesImport.join('\n'),
  modulesName: modulesName.join(',\n  '),
  jsComponents: jsComponents.join(',\n  ')
}))

console.log(`build complete component entry, path:${OUTPUT_FILE}`)